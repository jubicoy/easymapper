/*
 * This file is generated by jOOQ.
 */
package fi.jubic.easymapper.jooqtest.chatroom.db.tables;


import fi.jubic.easymapper.jooqtest.chatroom.db.ChatSample;
import fi.jubic.easymapper.jooqtest.chatroom.db.Indexes;
import fi.jubic.easymapper.jooqtest.chatroom.db.Keys;
import fi.jubic.easymapper.jooqtest.chatroom.db.tables.records.RoomRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Room extends TableImpl<RoomRecord> {

    private static final long serialVersionUID = -325385199;

    /**
     * The reference instance of <code>CHAT_SAMPLE.ROOM</code>
     */
    public static final Room ROOM = new Room();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RoomRecord> getRecordType() {
        return RoomRecord.class;
    }

    /**
     * The column <code>CHAT_SAMPLE.ROOM.ID</code>.
     */
    public final TableField<RoomRecord, Integer> ID = createField("ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>CHAT_SAMPLE.ROOM.NAME</code>.
     */
    public final TableField<RoomRecord, String> NAME = createField("NAME", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>CHAT_SAMPLE.ROOM.ADMINISTRATOR_ID</code>.
     */
    public final TableField<RoomRecord, Integer> ADMINISTRATOR_ID = createField("ADMINISTRATOR_ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>CHAT_SAMPLE.ROOM.CREATED_BY_ID</code>.
     */
    public final TableField<RoomRecord, Integer> CREATED_BY_ID = createField("CREATED_BY_ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>CHAT_SAMPLE.ROOM</code> table reference
     */
    public Room() {
        this(DSL.name("ROOM"), null);
    }

    /**
     * Create an aliased <code>CHAT_SAMPLE.ROOM</code> table reference
     */
    public Room(String alias) {
        this(DSL.name(alias), ROOM);
    }

    /**
     * Create an aliased <code>CHAT_SAMPLE.ROOM</code> table reference
     */
    public Room(Name alias) {
        this(alias, ROOM);
    }

    private Room(Name alias, Table<RoomRecord> aliased) {
        this(alias, aliased, null);
    }

    private Room(Name alias, Table<RoomRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Room(Table<O> child, ForeignKey<O, RoomRecord> key) {
        super(child, key, ROOM);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return ChatSample.CHAT_SAMPLE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.CONSTRAINT_INDEX_2, Indexes.CONSTRAINT_INDEX_26, Indexes.PRIMARY_KEY_2);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<RoomRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_2;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<RoomRecord>> getKeys() {
        return Arrays.<UniqueKey<RoomRecord>>asList(Keys.CONSTRAINT_2);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<RoomRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<RoomRecord, ?>>asList(Keys.CONSTRAINT_26, Keys.CONSTRAINT_267);
    }

    public ChatUser constraint_26() {
        return new ChatUser(this, Keys.CONSTRAINT_26);
    }

    public ChatUser constraint_267() {
        return new ChatUser(this, Keys.CONSTRAINT_267);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Room as(String alias) {
        return new Room(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Room as(Name alias) {
        return new Room(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Room rename(String name) {
        return new Room(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Room rename(Name name) {
        return new Room(name, null);
    }
}
